---
include:
  - dependencies/docker-compose.authelia.yml
  - dependencies/docker-compose.firefly.yml
  - dependencies/docker-compose.immich.yml
  - dependencies/docker-compose.nextcloud.yml
  - dependencies/docker-compose.paperless.yml
  - dependencies/docker-compose.rxresume.yml
  - dependencies/docker-compose.obsidian.yml
  - dependencies/docker-compose.owntracks.yml
networks:
  vaultwarden-web:
    name: vaultwarden-web
  wallabag-web:
    name: wallabag-web
secrets:
  smtp_password:
    file: ./.secrets/smtp_password
services:
  authelia:
    container_name: authelia
    environment:
      - AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE=/run/secrets/authelia_identity_providers_oidc_hmac_secret
      - AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_encryption_key
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE=/run/secrets/authelia_postgres_password
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/smtp_password
      - X_AUTHELIA_CONFIG_FILTERS=template
    image: authelia/authelia
    labels:
      com.centurylinklabs.watchtower.enable: true
      readme.description: The Single Sign-On Multi-Factor portal for web apps.
      readme.links.docker: https://hub.docker.com/r/authelia/authelia
      readme.links.web: https://www.authelia.com/
      traefik.docker.network: authelia-web
      traefik.enable: true
      traefik.http.middlewares.authelia.forwardauth.address: http://authelia:9091/api/verify?rd=https://login.${HOST}/
      traefik.http.middlewares.authelia.forwardauth.authresponseheaders: Remote-User, Remote-Groups, Remote-Email
      traefik.http.middlewares.authelia.forwardauth.trustforwardheader: true
      traefik.http.routers.authelia.entrypoints: https
      traefik.http.routers.authelia.rule: Host(`login.${HOST}`)
      traefik.http.services.authelia.loadbalancer.server.port: 9091
    networks:
      authelia:
      authelia-web:
    restart: unless-stopped
    secrets:
      - authelia_identity_providers_oidc_hmac_secret
      - authelia_identity_providers_oidc_jwks
      - authelia_jwt_secret
      - authelia_storage_encryption_key
      - authelia_postgres_password
      - smtp_password
    volumes:
      - ${CONFIG_DIR}/authelia:/config
  fidi:
    container_name: fidi
    environment:
      - FIREFLY_III_ACCESS_TOKEN_FILE=/run/secrets/firefly_access_token
      - FIREFLY_III_URL=http://firefly:8080
      - VANITY_URL=https://firefly.${HOST}
      - NORDIGEN_ID_FILE=/run/secrets/nordigen_id
      - NORDIGEN_KEY_FILE=/run/secrets/nordigen_key
      - TRUSTED_PROXIES=**
      - IMPORT_DIR_ALLOWLIST=/import
      - ENABLE_MAIL_REPORT=true
      - MAIL_DESTINATION=${ADMIN_MAIL}
      - MAIL_MAILER=smtp
      - MAIL_HOST=${SMTP_HOST}
      - MAIL_PORT=465
      - MAIL_USERNAME=${SMTP_USER}
      - MAIL_PASSWORD_FILE=/run/secrets/smtp_password
      - MAIL_ENCRYPTION=ssl
      - MAIL_FROM_ADDRESS=${SMTP_USER}
    image: fireflyiii/data-importer:latest
    labels:
      com.centurylinklabs.watchtower.enable: true
      ofelia.enabled: 'true'
      ofelia.job-exec.finance-import.command: /bin/sh -c 'for f in /import/*; do php artisan importer:import $$f; done'
      ofelia.job-exec.finance-import.schedule: 0 0 03 * * *
      readme.description: Firefly III Data Importer.
      readme.links.docker: https://hub.docker.com/r/fireflyiii/data-importer
      traefik.docker.network: firefly-web
      traefik.enable: true
      traefik.http.routers.fidi.entrypoints: https
      traefik.http.routers.fidi.middlewares: authelia
      traefik.http.routers.fidi.rule: Host(`firefly-data.${HOST}`)
    networks:
      firefly:
      firefly-web:
    restart: unless-stopped
    secrets:
      - firefly_access_token
      - nordigen_id
      - nordigen_key
      - smtp_password
    volumes:
      - ${CONFIG_DIR}/fidi:/import
  firefly:
    container_name: firefly
    depends_on:
      - firefly-postgres
    environment:
      - APP_KEY_FILE=/run/secrets/firefly_app_key
      - APP_URL=https://firefly.${HOST}/
      - TRUSTED_PROXIES=**
      - DB_HOST=firefly-postgres
      - DB_PORT=5432
      - DB_CONNECTION=pgsql
      - DB_DATABASE=firefly
      - DB_USERNAME=firefly
      - DB_PASSWORD_FILE=/run/secrets/firefly_postgres_password
      - MAIL_MAILER=smtp
      - MAIL_HOST=${SMTP_HOST}
      - MAIL_PORT=465
      - MAIL_FROM=${SMTP_USER}
      - MAIL_USERNAME=${SMTP_USER}
      - MAIL_PASSWORD_FILE=/run/secrets/smtp_password
      - MAIL_ENCRYPTION=ssl
      - AUTHENTICATION_GUARD=remote_user_guard
      - AUTHENTICATION_GUARD_HEADER=HTTP_REMOTE_EMAIL
    image: fireflyiii/core:latest
    labels:
      com.centurylinklabs.watchtower.enable: true
      readme.description: Personal Finance Manager.
      readme.links.docker: https://hub.docker.com/r/fireflyiii/core
      readme.links.web: https://www.firefly-iii.org/
      traefik.docker.network: firefly-web
      traefik.enable: true
      traefik.http.routers.firefly-api.entrypoints: https
      traefik.http.routers.firefly-api.rule: Host(`firefly.${HOST}`) && PathPrefix(`/api`)
      traefik.http.routers.firefly.entrypoints: https
      traefik.http.routers.firefly.middlewares: authelia
      traefik.http.routers.firefly.rule: Host(`firefly.${HOST}`)
    networks:
      firefly:
      firefly-web:
    restart: unless-stopped
    secrets:
      - firefly_postgres_password
      - firefly_app_key
      - smtp_password
    volumes:
      - ${DATA_DIR}/firefly/upload:/var/www/html/storage/upload
  immich-server:
    container_name: immich-server
    depends_on:
      - immich-redis
      - immich-postgres
    environment:
      - NODE_ENV=production
      - REDIS_HOSTNAME=immich-redis
      - DB_HOSTNAME=immich-postgres
      - DB_USERNAME=immich
      - DB_DATABASE_NAME=immich
      - DB_PASSWORD_FILE=/run/secrets/immich_postgres_password
    image: ghcr.io/immich-app/immich-server:release
    labels:
      com.centurylinklabs.watchtower.enable: true
      readme.description: Photo & Video Backup Solution
      readme.links.github: https://github.com/immich-app/immich
      readme.links.web: https://immich.app/
      traefik.docker.network: immich-web
      traefik.enable: true
      traefik.http.routers.immich-server.entrypoints: https
      traefik.http.routers.immich-server.rule: Host(`immich.${HOST}`)
      traefik.http.services.immich-server.loadbalancer.server.port: 3001
    networks:
      immich:
      immich-web:
    restart: unless-stopped
    secrets:
      - immich_postgres_password
    volumes:
      - ${DATA_DIR}/immich/upload:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
  nextcloud:
    container_name: nextcloud
    depends_on:
      - nextcloud-postgres
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD_FILE=/run/secrets/nextcloud_postgres_password
      - POSTGRES_HOST=nextcloud-postgres
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_SECURE=ssl
      - SMTP_PORT=465
      - SMTP_NAME=${SMTP_USER}
      - SMTP_PASSWORD_FILE=/run/secrets/smtp_password
      - MAIL_FROM=${SMTP_USER}
    image: nextcloud
    labels:
      com.centurylinklabs.watchtower.enable: true
      readme.description: Personal Cloud Storage
      readme.links.docker: https://hub.docker.com/_/nextcloud
      readme.links.web: https://nextcloud.com/
      traefik.docker.network: nextcloud-web
      traefik.enable: true
      traefik.http.routers.nextcloud.entrypoints: https
      traefik.http.routers.nextcloud.rule: Host(`nextcloud.${HOST}`)
    networks:
      nextcloud:
      nextcloud-web:
    restart: unless-stopped
    secrets:
      - nextcloud_postgres_password
      - smtp_password
    volumes:
      - ${DATA_DIR}/nextcloud/html:/var/www/html
      - ${DATA_DIR}/nextcloud/apps:/var/www/html/custom_apps
      - ${DATA_DIR}/nextcloud/data:/var/www/html/data
      - ${CONFIG_DIR}/nextcloud:/var/www/html/config
  paperless-ngx:
    container_name: paperless-ngx
    depends_on:
      - paperless-postgres
      - paperless-redis
      - paperless-gotenberg
      - paperless-tika
    environment:
      PAPERLESS_DBHOST: paperless-postgres
      PAPERLESS_DBPASS_FILE: /run/secrets/paperless_postgres_password
      PAPERLESS_REDIS: redis://paperless-redis:6379
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_ENDPOINT: http://paperless-tika:9998
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless-gotenberg:3000
      PAPERLESS_URL: https://paperless.${HOST}
      USERMAP_GID: ${GUID}
      USERMAP_UID: ${PUID}
    healthcheck:
      interval: 30s
      retries: 5
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      timeout: 10s
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    labels:
      readme.description: Document Management System.
      readme.links.github: https://github.com/paperless-ngx/paperless-ngx
      traefik.docker.network: paperless-web
      traefik.enable: true
      traefik.http.routers.paperless-ngx.entrypoints: https
      traefik.http.routers.paperless-ngx.rule: Host(`paperless.${HOST}`)
      traefik.http.services.paperless-ngx.loadbalancer.server.port: 8000
    networks:
      paperless:
      paperless-web:
    restart: unless-stopped
    secrets:
      - paperless_postgres_password
    volumes:
      - ${DATA_DIR}/paperless/data:/usr/src/paperless/data
      - ${DATA_DIR}/paperless/media:/usr/src/paperless/media
      - ${DATA_DIR}/paperless/export:/usr/src/paperless/export
      - ${DATA_DIR}/paperless/consume:/usr/src/paperless/consume
      - ${LOG_DIR}/paperless:/usr/src/paperless/data/log
  rxresume-client:
    container_name: rxresume-client
    depends_on:
      - rxresume-server
    environment:
      PUBLIC_SERVER_URL: https://rxresume.${HOST}/api
      PUBLIC_URL: https://rxresume.${HOST}
    image: amruthpillai/reactive-resume:client-latest
    labels:
      traefik.enable: true
      traefik.http.routers.rxresume-client.entrypoints: https
      traefik.http.routers.rxresume-client.rule: Host(`rxresume.${HOST}`)
      traefik.http.services.rxresume-client.loadbalancer.server.port: 3000
    networks:
      - rxresume-web
    restart: unless-stopped
  vaultwarden:
    container_name: vaultwarden
    environment:
      - SMTP_HOST
      - SMTP_FROM=${SMTP_USER}
      - SMTP_PORT=587
      - SMTP_SECURITY=starttls
      - SMTP_USERNAME=${SMTP_USER}
      - SMTP_PASSWORD_FILE=/run/secrets/smtp_password
      - DOMAIN=https://fence.${HOST}
    image: vaultwarden/server:latest
    labels:
      readme.description: Unofficial Bitwarden compatible server written in Rust.
      readme.links.github: https://github.com/dani-garcia/vaultwarden
      traefik.enable: true
      traefik.http.routers.vaultwarden.entrypoints: https
      traefik.http.routers.vaultwarden.rule: Host(`fence.${HOST}`)
    networks:
      vaultwarden-web:
    restart: unless-stopped
    secrets:
      - smtp_password
    volumes:
      - ${DATA_DIR}/vaultwarden:/data
  wallabag:
    container_name: wallabag
    environment:
      - SYMFONY__ENV__DOMAIN_NAME=https://wallabag.${HOST}
    image: wallabag/wallabag
    labels:
      com.centurylinklabs.watchtower.enable: true
      readme.description: A self hostable application for saving web pages, freely.
      readme.links.github: https://github.com/wallabag
      traefik.enable: true
      traefik.http.routers.wallabag.entrypoints: https
      traefik.http.routers.wallabag.rule: Host(`wallabag.${HOST}`)
      traefik.docker.network: wallabag-web
    networks:
      wallabag-web:
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/wallabag:/var/www/wallabag/data
